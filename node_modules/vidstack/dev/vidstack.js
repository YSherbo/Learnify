import { T as Thumbnail, S as Slider } from './chunks/vidstack-D4cQThOl.js';
export { A as ARIAKeyShortcuts, U as AirPlayButton, ao as AudioGainRadioGroup, aa as AudioGainSlider, u as AudioProviderLoader, am as AudioRadioGroup, r as AudioTrackList, Z as CaptionButton, au as Captions, ap as CaptionsRadioGroup, al as ChaptersRadioGroup, N as Controls, D as DASHProviderLoader, an as DEFAULT_AUDIO_GAINS, aq as DEFAULT_PLAYBACK_RATES, _ as FullscreenButton, g as FullscreenController, at as Gesture, W as GoogleCastButton, H as HLSProviderLoader, a2 as LiveButton, m as LocalMediaStorage, L as Logger, n as MEDIA_KEY_SHORTCUTS, K as MediaAnnouncer, l as MediaControls, d as MediaPlayer, c as MediaProvider, k as MediaRemoteControl, af as Menu, M as MenuButton, ai as MenuItems, ag as MenuPortal, $ as MuteButton, a0 as PIPButton, X as PlayButton, P as Poster, as as QualityRadioGroup, ac as QualitySlider, ak as Radio, aj as RadioGroup, j as ScreenOrientationController, a1 as SeekButton, ae as SliderChapters, a4 as SliderController, a7 as SliderPreview, a6 as SliderValue, a5 as SliderVideo, ar as SpeedRadioGroup, ab as SpeedSlider, p as TextRenderers, q as TextTrackList, aw as ThumbnailsLoader, av as Time, ad as TimeSlider, R as ToggleButton, O as Tooltip, Q as TooltipContent, v as VideoProviderLoader, V as VideoQualityList, w as VimeoProviderLoader, a9 as VolumeSlider, Y as YouTubeProviderLoader, h as canFullscreen, e as formatSpokenTime, f as formatTime, x as isAudioProvider, B as isDASHProvider, G as isGoogleCastProvider, z as isHLSProvider, i as isHTMLAudioElement, b as isHTMLIFrameElement, I as isHTMLMediaElement, a as isHTMLVideoElement, y as isVideoProvider, o as isVideoQualitySrc, E as isVimeoProvider, C as isYouTubeProvider, ah as menuPortalContext, J as sliderContext, a3 as sliderState, s as sortVideoQualities, a8 as updateSliderPreviewPlacement } from './chunks/vidstack-D4cQThOl.js';
export { L as List, m as mediaState, s as softResetMediaState } from './chunks/vidstack-azSUCiDw.js';
export { g as getDownloadFile } from './chunks/vidstack-Chu5mi6j.js';
export { T as TimeRange, b as getTimeRangesEnd, g as getTimeRangesStart } from './chunks/vidstack-CjVfv_MQ.js';
export { m as mediaContext, a as usePlyrLayoutClasses } from './chunks/vidstack-pgEBqOw4.js';
import { a as TextTrackSymbol } from './chunks/vidstack-xAXVpXZQ.js';
export { T as TextTrack, f as findActiveCue, b as isCueActive, i as isTrackCaptionKind, p as parseJSONCaptionsFile, w as watchActiveTextTrack, c as watchCueTextChange } from './chunks/vidstack-xAXVpXZQ.js';
import { i as isString, l as listenEvent, D as DOMEvent, L as useState } from './chunks/vidstack-mrj_B2Yo.js';
export { P as appendTriggerEvent, O as findTriggerEvent, M as hasTriggerEvent, y as isKeyboardClick, R as isKeyboardEvent, Q as isPointerEvent, N as walkTriggerEventChain } from './chunks/vidstack-mrj_B2Yo.js';
export { C as ControlsGroup, T as TooltipTrigger } from './chunks/vidstack-igu2AepS.js';
export { M as MenuItem } from './chunks/vidstack-CEKUQS6V.js';
export { A as AUDIO_EXTENSIONS, l as AUDIO_TYPES, D as DASH_VIDEO_EXTENSIONS, o as DASH_VIDEO_TYPES, H as HLS_VIDEO_EXTENSIONS, n as HLS_VIDEO_TYPES, V as VIDEO_EXTENSIONS, m as VIDEO_TYPES, e as canChangeVolume, d as canGoogleCastSrc, f as canOrientScreen, g as canPlayHLSNatively, k as canRotateScreen, h as canUsePictureInPicture, j as canUseVideoPresentation, i as isAudioSrc, q as isDASHSrc, p as isHLSSrc, r as isMediaStream, a as isVideoSrc } from './chunks/vidstack-CFPdVubu.js';
import './chunks/vidstack-CnaYRoc3.js';
import './chunks/vidstack-1gmLGa6x.js';
import './chunks/vidstack-DM_McBs5.js';
import './chunks/vidstack-ksPACRiU.js';

class LibASSTextRenderer {
  constructor(loader, config) {
    this.loader = loader;
    this.config = config;
    this.priority = 1;
    this._instance = null;
    this._track = null;
    this._typeRE = /(ssa|ass)$/;
  }
  canRender(track, video) {
    return !!video && !!track.src && (isString(track.type) && this._typeRE.test(track.type) || this._typeRE.test(track.src));
  }
  attach(video) {
    if (!video)
      return;
    this.loader().then(async (mod) => {
      this._instance = new mod.default({
        ...this.config,
        video,
        subUrl: this._track?.src || ""
      });
      listenEvent(this._instance, "ready", () => {
        const canvas = this._instance?._canvas;
        if (canvas)
          canvas.style.pointerEvents = "none";
      });
      listenEvent(this._instance, "error", (event) => {
        if (this._track) {
          this._track[TextTrackSymbol._readyState] = 3;
          this._track.dispatchEvent(
            new DOMEvent("error", {
              trigger: event,
              detail: event.error
            })
          );
        }
      });
    });
  }
  changeTrack(track) {
    if (!track || track.readyState === 3) {
      this._freeTrack();
    } else if (this._track !== track) {
      this._instance?.setTrackByUrl(track.src);
      this._track = track;
    }
  }
  detach() {
    this._freeTrack();
  }
  _freeTrack() {
    this._instance?.freeTrack();
    this._track = null;
  }
}

class SliderThumbnail extends Thumbnail {
  onAttach(el) {
    this._slider = useState(Slider.state);
  }
  _getTime() {
    const { duration, clipStartTime } = this._media.$state;
    return clipStartTime() + this._slider.pointerRate() * duration();
  }
}

{
  console.warn("[vidstack] dev mode!");
}

export { LibASSTextRenderer, Slider, SliderThumbnail, Thumbnail };
