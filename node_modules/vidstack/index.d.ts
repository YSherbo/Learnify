/// <reference path="./dom.d.ts" />
/// <reference path="./google-cast.d.ts" />

import { m as MediaProviderLoader, A as AudioProvider, S as Src, n as MediaType, o as MediaContext, G as GoogleCastProvider, p as GoogleCastLoadedEvent, q as GoogleCastOptions, V as VideoProvider, r as DASHProvider, H as HLSProvider, s as VimeoProvider, Y as YouTubeProvider, t as Thumbnail, u as SliderOrientation, v as TextRenderer, w as TextTrack, x as TextTrackList, y as VideoQuality, z as MediaKeyShortcuts } from './types/vidstack-Dh59_XGt.js';
export { fY as AirPlayButton, fX as AirPlayButtonEvents, fW as AirPlayButtonProps, cW as AnyMediaProvider, hQ as AudioGainRadioGroup, hT as AudioGainRadioGroupChangeEvent, hS as AudioGainRadioGroupEvents, hR as AudioGainRadioGroupProps, gR as AudioGainSlider, gV as AudioGainSliderCSSVars, gU as AudioGainSliderEvents, gS as AudioGainSliderProps, gT as AudioGainSliderState, bV as AudioMimeType, hK as AudioRadioGroup, hO as AudioRadioGroupChangeEvent, hM as AudioRadioGroupEvents, hL as AudioRadioGroupProps, hN as AudioRadioOption, bU as AudioSrc, bW as AudioSrcMeta, cE as AudioTrack, cH as AudioTrackAddEvent, cJ as AudioTrackChangeEvent, cD as AudioTrackList, cG as AudioTrackListEvent, cF as AudioTrackListEvents, cI as AudioTrackRemoveEvent, g5 as CaptionButton, g4 as CaptionButtonEvents, g3 as CaptionButtonProps, ih as Captions, ig as CaptionsProps, hU as CaptionsRadioGroup, hY as CaptionsRadioGroupChangeEvent, hW as CaptionsRadioGroupEvents, hV as CaptionsRadioGroupProps, hX as CaptionsRadioOption, cK as ChangeAudioTrackEventDetail, hG as ChapterRadioGroupProps, hF as ChaptersRadioGroup, hI as ChaptersRadioGroupChangeEvent, hH as ChaptersRadioGroupEvents, hJ as ChaptersRadioOption, fH as Controls, fK as ControlsChangeEvent, fJ as ControlsEvents, fL as ControlsGroup, fI as ControlsProps, fe as DASHAdaptationSetRemovedNoCapabilitiesEvent, eK as DASHAllTextTracksAddedEvent, ec as DASHAstInFutureEvent, ed as DASHBaseUrlsUpdatedEvent, eh as DASHBufferLevelUpdatedEvent, ef as DASHBufferLoadedEvent, ee as DASHBufferStalledEvent, eg as DASHBufferStateChangedEvent, eT as DASHCanPlayEvent, eU as DASHCanPlayThroughEvent, eS as DASHCaptionContainerResizeEvent, eR as DASHCaptionRenderedEvent, fc as DASHConformanceViolationEvent, fj as DASHConstructor, fk as DASHConstructorLoader, ff as DASHContentSteeringRequestCompletedEvent, eM as DASHCueEnterEvent, eN as DASHCueExitEvent, ei as DASHDvbFontDownloadAddedEvent, ej as DASHDvbFontDownloadCompleteEvent, ek as DASHDvbFontDownloadFailedEvent, el as DASHDynamicToStaticEvent, em as DASHErrorEvent, fb as DASHEventModeOnReceiveEvent, fa as DASHEventModeOnStartEvent, eq as DASHFragmentLoadingAbandonedEvent, en as DASHFragmentLoadingCompletedEvent, eo as DASHFragmentLoadingProgressEvent, ep as DASHFragmentLoadingStartedEvent, fg as DASHInbandPrftEvent, fo as DASHInstanceCallback, ea as DASHInstanceEvent, e9 as DASHLibLoadErrorEvent, e7 as DASHLibLoadStartEvent, e8 as DASHLibLoadedEvent, fn as DASHLibrary, er as DASHLogEvent, fi as DASHManagedMediaSourceEndStreamingEvent, fh as DASHManagedMediaSourceStartStreamingEvent, eu as DASHManifestLoadedEvent, et as DASHManifestLoadingFinishedEvent, es as DASHManifestLoadingStartedEvent, f9 as DASHManifestValidityChangedEvent, e6 as DASHMediaEvent, ex as DASHMetricAddedEvent, ew as DASHMetricChangedEvent, ey as DASHMetricUpdatedEvent, ev as DASHMetricsChangedEvent, c1 as DASHMimeType, fl as DASHNamespace, fm as DASHNamespaceLoader, eA as DASHPeriodSwitchCompletedEvent, ez as DASHPeriodSwitchStartedEvent, eV as DASHPlaybackEndedEvent, eW as DASHPlaybackErrorEvent, eZ as DASHPlaybackLoadedDataEvent, eY as DASHPlaybackMetaDataLoadedEvent, eX as DASHPlaybackNotAllowedEvent, e_ as DASHPlaybackPausedEvent, e$ as DASHPlaybackPlayingEvent, f0 as DASHPlaybackProgressEvent, f1 as DASHPlaybackRateChangedEvent, f2 as DASHPlaybackSeekedEvent, f3 as DASHPlaybackSeekingEvent, f4 as DASHPlaybackStalledEvent, f5 as DASHPlaybackStartedEvent, f6 as DASHPlaybackTimeUpdatedEvent, f7 as DASHPlaybackVolumeChangedEvent, f8 as DASHPlaybackWaitingEvent, e5 as DASHProviderEvents, eC as DASHQualityChangeRenderedEvent, eB as DASHQualityChangeRequestedEvent, fd as DASHRepresentationSwitchEvent, c0 as DASHSrc, eG as DASHStreamActivatedEvent, eH as DASHStreamDeactivatedEvent, eI as DASHStreamInitializedEvent, eE as DASHStreamInitializingEvent, eJ as DASHStreamTeardownCompleteEvent, eF as DASHStreamUpdatedEvent, eL as DASHTextTrackAddedEvent, eO as DASHThroughputMeasurementStoredEvent, eD as DASHTrackChangeRenderedEvent, eP as DASHTtmlParsedEvent, eQ as DASHTtmlToParseEvent, eb as DASHUnsupportedEvent, hP as DEFAULT_AUDIO_GAINS, hZ as DEFAULT_PLAYBACK_RATES, D as DefaultLayoutProps, fs as DefaultLayoutTranslations, fr as DefaultLayoutWord, F as FileDownloadInfo, cd as FindMediaPlayerEvent, cc as FindMediaPlayerEventDetail, X as FullscreenAdapter, g8 as FullscreenButton, g7 as FullscreenButtonEvents, g6 as FullscreenButtonProps, _ as FullscreenChangeEvent, U as FullscreenController, $ as FullscreenErrorEvent, Z as FullscreenEvents, i7 as Gesture, ia as GestureAction, ic as GestureEvent, i9 as GestureEventType, ib as GestureEvents, i8 as GestureProps, ie as GestureTriggerEvent, id as GestureWillTriggerEvent, f$ as GoogleCastButton, f_ as GoogleCastButtonEvents, fZ as GoogleCastButtonProps, c_ as GoogleCastEvent, cZ as GoogleCastEvents, c$ as GoogleCastLoadStartEvent, d1 as GoogleCastPromptError, d2 as GoogleCastPromptErrorCode, d3 as GoogleCastPromptErrorEvent, d0 as GoogleCastPromptEvent, dC as HLSAudioTrackLoadedEvent, dB as HLSAudioTrackLoadingEvent, dA as HLSAudioTrackSwitchedEvent, dz as HLSAudioTrackSwitchingEvent, dy as HLSAudioTracksUpdatedEvent, e0 as HLSBackBufferReachedEvent, dj as HLSBufferAppendedEvent, di as HLSBufferAppendingEvent, dg as HLSBufferCodecsEvent, dh as HLSBufferCreatedEvent, dk as HLSBufferEosEvent, dm as HLSBufferFlushedEvent, dl as HLSBufferFlushingEvent, df as HLSBufferResetEvent, e1 as HLSConstructor, e2 as HLSConstructorLoader, dJ as HLSCuesParsedEvent, dZ as HLSDestroyingEvent, dY as HLSErrorEvent, dW as HLSFpsDropEvent, dX as HLSFpsDropLevelCappingEvent, dU as HLSFragBufferedDataEvent, dV as HLSFragChangedEvent, dP as HLSFragDecryptedEvent, dN as HLSFragLoadEmergencyAbortedEvent, dO as HLSFragLoadedEvent, dM as HLSFragLoadingEvent, dT as HLSFragParsedEvent, dQ as HLSFragParsingInitSegmentEvent, dS as HLSFragParsingMetadataEvent, dR as HLSFragParsingUserdataEvent, dL as HLSInitPtsFoundEvent, e4 as HLSInstanceCallback, d9 as HLSInstanceEvent, d$ as HLSKeyLoadedEvent, d_ as HLSKeyLoadingEvent, du as HLSLevelLoadedEvent, dt as HLSLevelLoadingEvent, dw as HLSLevelPtsUpdatedEvent, ds as HLSLevelSwitchedEvent, dr as HLSLevelSwitchingEvent, dv as HLSLevelUpdatedEvent, dx as HLSLevelsUpdatedEvent, d8 as HLSLibLoadErrorEvent, d6 as HLSLibLoadStartEvent, d7 as HLSLibLoadedEvent, e3 as HLSLibrary, dp as HLSManifestLoadedEvent, dn as HLSManifestLoadingEvent, dq as HLSManifestParsedEvent, dc as HLSMediaAttachedEvent, db as HLSMediaAttachingEvent, de as HLSMediaDetachedEvent, dd as HLSMediaDetachingEvent, d5 as HLSMediaEvent, b$ as HLSMimeType, dK as HLSNonNativeTextTracksFoundEvent, d4 as HLSProviderEvents, b_ as HLSSrc, dI as HLSSubtitleFragProcessedEvent, dH as HLSSubtitleTrackLoadedEvent, dG as HLSSubtitleTrackLoadingEvent, dF as HLSSubtitleTrackSwitchEvent, dE as HLSSubtitleTracksClearedEvent, dD as HLSSubtitleTracksUpdatedEvent, da as HLSUnsupportedEvent, bT as HTMLMediaSrc, K as List, O as ListAddEvent, N as ListEvents, J as ListItem, R as ListReadonlyChangeEvent, Q as ListRemoveEvent, gk as LiveButton, gj as LiveButtonEvents, gi as LiveButtonProps, af as LocalMediaStorage, a2 as LogEvent, a1 as LogEventDetail, B as Logger, a0 as LoggerEvents, ai as MediaAbortEvent, bf as MediaAirPlayRequestEvent, fB as MediaAnnouncer, fE as MediaAnnouncerEvents, fC as MediaAnnouncerProps, fD as MediaAnnouncerState, fG as MediaAnnouncerTranslations, fF as MediaAnnouncerWord, au as MediaAudioGainChangeEvent, bv as MediaAudioGainChangeRequestEvent, ak as MediaAudioTrackChangeEvent, bl as MediaAudioTrackChangeRequestEvent, aj as MediaAudioTracksChangeEvent, al as MediaAutoPlayChangeEvent, ap as MediaAutoPlayEvent, ao as MediaAutoPlayEventDetail, an as MediaAutoPlayFailEvent, am as MediaAutoPlayFailEventDetail, aq as MediaCanLoadEvent, ar as MediaCanLoadPosterEvent, as as MediaCanPlayDetail, j as MediaCanPlayEvent, at as MediaCanPlayThroughEvent, ad as MediaControls, g as MediaControlsChangeEvent, bK as MediaCrossOrigin, ay as MediaDestroyEvent, az as MediaDurationChangeEvent, aA as MediaEmptiedEvent, aB as MediaEndEvent, aC as MediaEndedEvent, bm as MediaEnterFullscreenRequestEvent, bo as MediaEnterPIPRequestEvent, bP as MediaErrorCode, bQ as MediaErrorDetail, aD as MediaErrorEvent, ah as MediaEvent, e as MediaEvents, bn as MediaExitFullscreenRequestEvent, bp as MediaExitPIPRequestEvent, cY as MediaFullscreenAdapter, h as MediaFullscreenChangeEvent, aE as MediaFullscreenErrorEvent, bk as MediaFullscreenRequestTarget, bq as MediaGoogleCastRequestEvent, bE as MediaHidePosterRequestEvent, cU as MediaKeyShortcut, cT as MediaKeyTarget, cV as MediaKeysCallback, aI as MediaLiveChangeEvent, aJ as MediaLiveEdgeChangeEvent, br as MediaLiveEdgeRequestEvent, aK as MediaLoadStartEvent, aF as MediaLoadedDataEvent, aG as MediaLoadedMetadataEvent, bN as MediaLoadingStrategy, aH as MediaLoopChangeEvent, bF as MediaLoopRequestEvent, bi as MediaMuteRequestEvent, b5 as MediaOrientationChangeEvent, bH as MediaOrientationLockRequestEvent, bI as MediaOrientationUnlockRequestEvent, aX as MediaPIPChangeEvent, aY as MediaPIPErrorEvent, bC as MediaPauseControlsRequestEvent, aM as MediaPauseEvent, bw as MediaPauseRequestEvent, aN as MediaPlayEvent, aO as MediaPlayFailEvent, bs as MediaPlayRequestEvent, fx as MediaPlayer, cb as MediaPlayerConnectEvent, ab as MediaPlayerEvents, M as MediaPlayerProps, ca as MediaPlayerQuery, b as MediaPlayerState, aP as MediaPlayingEvent, aQ as MediaPlaysInlineChangeEvent, aR as MediaPosterChangeEvent, bO as MediaPosterLoadingStrategy, bg as MediaPosterStartLoadingRequestEvent, aT as MediaProgressEvent, aS as MediaProgressEventDetail, fA as MediaProvider, cX as MediaProviderAdapter, aV as MediaProviderChangeEvent, aU as MediaProviderLoaderChangeEvent, fy as MediaProviderProps, aW as MediaProviderSetupEvent, fz as MediaProviderState, aZ as MediaQualitiesChangeEvent, a_ as MediaQualityChangeEvent, bt as MediaQualityChangeRequestEvent, i as MediaRateChangeEvent, bu as MediaRateChangeRequestEvent, ac as MediaRemoteControl, aw as MediaRemotePlaybackChangeEvent, av as MediaRemotePlaybackChangeEventDetail, b6 as MediaReplayEvent, be as MediaRequestEvents, bB as MediaResumeControlsRequestEvent, bx as MediaSeekRequestEvent, a$ as MediaSeekedEvent, b0 as MediaSeekingEvent, by as MediaSeekingRequestEvent, bD as MediaShowPosterRequestEvent, ax as MediaSourceChangeEvent, b1 as MediaSourcesChangeEvent, bR as MediaSrc, bS as MediaSrcObject, b2 as MediaStalledEvent, bz as MediaStartLoadingRequestEvent, b3 as MediaStartedEvent, c9 as MediaState, aa as MediaStateAccessors, ae as MediaStorage, c7 as MediaStore, bJ as MediaStreamType, b9 as MediaStreamTypeChangeEvent, b4 as MediaSuspendEvent, f as MediaTextTrackChangeEvent, bh as MediaTextTrackChangeRequestEvent, ba as MediaTextTracksChangeEvent, k as MediaTimeUpdateEvent, b7 as MediaTimeUpdateEventDetail, b8 as MediaTitleChangeEvent, aL as MediaTypeChangeEvent, bj as MediaUnmuteRequestEvent, ce as MediaUserEvents, bG as MediaUserLoopChangeRequestEvent, c as MediaViewType, bb as MediaViewTypeChangeEvent, bc as MediaVolumeChange, l as MediaVolumeChangeEvent, bA as MediaVolumeChangeRequestEvent, bd as MediaWaitingEvent, hc as Menu, hh as MenuButton, hj as MenuButtonEvents, hi as MenuButtonProps, hk as MenuButtonSelectEvent, hg as MenuCloseEvent, he as MenuEvents, hl as MenuItem, hq as MenuItems, hu as MenuItemsProps, hf as MenuOpenEvent, hr as MenuPlacement, ht as MenuPlacementAlign, hs as MenuPlacementSide, hm as MenuPortal, ho as MenuPortalContext, hn as MenuPortalProps, hd as MenuProps, gb as MuteButton, ga as MuteButtonEvents, g9 as MuteButtonProps, iv as MuxThumbnailStoryboard, iw as MuxThumbnailTile, ge as PIPButton, gd as PIPButtonEvents, gc as PIPButtonProps, g2 as PlayButton, g1 as PlayButtonEvents, g0 as PlayButtonProps, d as PlayerSrc, c8 as PlayerStore, fu as PlyrControl, P as PlyrLayoutProps, a as PlyrLayoutTranslations, fv as PlyrLayoutWord, ft as PlyrMarker, ik as Poster, ii as PosterProps, ij as PosterState, i2 as QualityRadioGroup, i6 as QualityRadioGroupChangeEvent, i5 as QualityRadioGroupEvents, i3 as QualityRadioGroupProps, i4 as QualityRadioOption, g$ as QualitySlider, h3 as QualitySliderCSSVars, h2 as QualitySliderEvents, h0 as QualitySliderProps, h1 as QualitySliderState, hz as Radio, hC as RadioChangeEvent, hB as RadioEvents, hv as RadioGroup, hy as RadioGroupChangeEvent, hx as RadioGroupEvents, hw as RadioGroupProps, hE as RadioOption, hA as RadioProps, hD as RadioSelectEvent, bM as RemotePlaybackInfo, bL as RemotePlaybackType, a6 as ScreenOrientationChangeEvent, a5 as ScreenOrientationChangeEventDetail, a3 as ScreenOrientationController, a4 as ScreenOrientationEvents, a8 as ScreenOrientationLockType, a7 as ScreenOrientationType, gh as SeekButton, gg as SeekButtonEvents, gf as SeekButtonProps, ag as SerializedVideoQuality, gw as Slider, gs as SliderCSSVars, h9 as SliderChapters, hb as SliderChaptersCSSVars, ha as SliderChaptersProps, gz as SliderController, gA as SliderControllerProps, gy as SliderDelegate, go as SliderDragEndEvent, gn as SliderDragStartEvent, gq as SliderDragValueChangeEvent, gm as SliderEvent, gl as SliderEvents, gr as SliderPointerValueChangeEvent, gJ as SliderPreview, gL as SliderPreviewProps, gx as SliderProps, gv as SliderState, gu as SliderStore, gH as SliderValue, gp as SliderValueChangeEvent, gI as SliderValueProps, gB as SliderVideo, gF as SliderVideoCanPlayEvent, gG as SliderVideoErrorEvent, gE as SliderVideoEvents, gC as SliderVideoProps, gD as SliderVideoState, h_ as SpeedRadioGroup, i1 as SpeedRadioGroupChangeEvent, i0 as SpeedRadioGroupEvents, h$ as SpeedRadioGroupProps, gW as SpeedSlider, g_ as SpeedSliderCSSVars, gZ as SpeedSliderEvents, gX as SpeedSliderProps, gY as SpeedSliderState, ci as TextRenderers, cs as TextTrackAddCueEvent, cA as TextTrackAddEvent, cu as TextTrackCueChangeEvent, cr as TextTrackErrorEvent, co as TextTrackEvent, cn as TextTrackEvents, T as TextTrackInit, cz as TextTrackListEvent, cy as TextTrackListEvents, cC as TextTrackListModeChangeEvent, cq as TextTrackLoadEvent, cp as TextTrackLoadStartEvent, cv as TextTrackModeChangeEvent, cj as TextTrackReadyState, ct as TextTrackRemoveCueEvent, cB as TextTrackRemoveEvent, iz as ThumbnailCoords, iy as ThumbnailImage, ix as ThumbnailImageInit, ip as ThumbnailProps, is as ThumbnailSrc, iq as ThumbnailState, it as ThumbnailStoryboard, iu as ThumbnailTile, ir as ThumbnailsLoader, il as Time, im as TimeProps, cf as TimeRange, h4 as TimeSlider, h5 as TimeSliderCSSVars, h8 as TimeSliderEvents, h6 as TimeSliderProps, h7 as TimeSliderState, io as TimeState, fV as ToggleButton, fU as ToggleButtonProps, fM as Tooltip, fP as TooltipContent, fT as TooltipContentProps, fQ as TooltipPlacement, fS as TooltipPlacementAlign, fR as TooltipPlacementSide, fN as TooltipProps, fO as TooltipTrigger, cm as VTTContent, ck as VTTCueInit, cl as VTTRegionInit, bY as VideoMimeType, fq as VideoPresentationChangeEvent, fp as VideoPresentationEvents, cO as VideoQualityAddEvent, cS as VideoQualityAutoChangeEvent, cQ as VideoQualityChangeEvent, cR as VideoQualityChangeEventDetail, cL as VideoQualityList, cN as VideoQualityListEvent, cM as VideoQualityListEvents, cP as VideoQualityRemoveEvent, bX as VideoSrc, bZ as VideoSrcMeta, c3 as VimeoSrc, gM as VolumeSlider, gQ as VolumeSliderCSSVars, gP as VolumeSliderEvents, gN as VolumeSliderProps, gO as VolumeSliderState, c2 as YouTubeSrc, W as canFullscreen, I as formatSpokenTime, E as formatTime, C as getDownloadFile, ch as getTimeRangesEnd, cg as getTimeRangesStart, cw as isTrackCaptionKind, c4 as isVideoQualitySrc, a9 as mediaContext, c5 as mediaState, hp as menuPortalContext, cx as parseJSONCaptionsFile, gt as sliderState, c6 as softResetMediaState, gK as updateSliderPreviewPlacement, fw as usePlyrLayoutClasses } from './types/vidstack-Dh59_XGt.js';
import { R as ReadSignal, W as WriteSignal, C as Context, E as EventsTarget, D as Dispose, V as ViewController } from './types/vidstack-r3TSzzgs.js';
export { a as appendTriggerEvent, f as findTriggerEvent, h as hasTriggerEvent, b as isKeyboardClick, c as isKeyboardEvent, i as isPointerEvent, w as walkTriggerEventChain } from './types/vidstack-r3TSzzgs.js';
import { VTTCue } from 'media-captions';
import 'dashjs';
import 'hls.js';

declare class AudioProviderLoader implements MediaProviderLoader<AudioProvider> {
    readonly name = "audio";
    target: HTMLAudioElement;
    canPlay(src: Src): boolean;
    mediaType(): MediaType;
    load(ctx: MediaContext): Promise<AudioProvider>;
}

declare class GoogleCastLoader implements MediaProviderLoader<GoogleCastProvider> {
    readonly name = "google-cast";
    target: HTMLElement;
    protected _player?: cast.framework.RemotePlayer;
    /**
     * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}
     */
    get cast(): cast.framework.CastContext;
    mediaType(): MediaType;
    canPlay(src: Src): boolean;
    prompt(ctx: MediaContext): Promise<void>;
    load(ctx: MediaContext): Promise<GoogleCastProvider>;
    protected _loadCastFramework(ctx: MediaContext): Promise<GoogleCastLoadedEvent | undefined>;
    protected _showPrompt(options: GoogleCastOptions): Promise<void>;
    protected _setOptions(options?: GoogleCastOptions): void;
    protected _notifyRemoteStateChange(ctx: MediaContext, state: RemotePlaybackState, trigger?: Event): void;
    private _createError;
}

declare class VideoProviderLoader implements MediaProviderLoader<VideoProvider> {
    readonly name: string;
    target: HTMLVideoElement;
    canPlay(src: Src): boolean;
    mediaType(): MediaType;
    load(ctx: MediaContext): Promise<VideoProvider>;
}

declare class DASHProviderLoader extends VideoProviderLoader implements MediaProviderLoader<DASHProvider> {
    static supported: boolean;
    readonly name = "dash";
    canPlay(src: Src): boolean;
    load(context: any): Promise<DASHProvider>;
}

declare class HLSProviderLoader extends VideoProviderLoader implements MediaProviderLoader<HLSProvider> {
    static supported: boolean;
    readonly name = "hls";
    canPlay(src: Src): boolean;
    load(context: any): Promise<HLSProvider>;
}

declare class VimeoProviderLoader implements MediaProviderLoader<VimeoProvider> {
    readonly name = "vimeo";
    target: HTMLIFrameElement;
    preconnect(): void;
    canPlay(src: Src): boolean;
    mediaType(): MediaType;
    load(ctx: MediaContext): Promise<VimeoProvider>;
    loadPoster(src: Src, ctx: MediaContext, abort: AbortController): Promise<string | null>;
}

declare class YouTubeProviderLoader implements MediaProviderLoader<YouTubeProvider> {
    readonly name = "youtube";
    target: HTMLIFrameElement;
    preconnect(): void;
    canPlay(src: Src): boolean;
    mediaType(): MediaType;
    load(ctx: MediaContext): Promise<YouTubeProvider>;
    loadPoster(src: Src, ctx: MediaContext, abort: AbortController): Promise<string | null>;
}

/** @see {@link https://www.vidstack.io/docs/player/providers/audio} */
declare function isAudioProvider(provider: any): provider is AudioProvider;
/** @see {@link https://www.vidstack.io/docs/player/providers/video} */
declare function isVideoProvider(provider: any): provider is VideoProvider;
/** @see {@link https://www.vidstack.io/docs/player/providers/hls} */
declare function isHLSProvider(provider: any): provider is HLSProvider;
declare function isDASHProvider(provider: any): provider is DASHProvider;
/** @see {@link https://www.vidstack.io/docs/player/providers/youtube} */
declare function isYouTubeProvider(provider: any): provider is YouTubeProvider;
/** @see {@link https://www.vidstack.io/docs/player/providers/vimeo} */
declare function isVimeoProvider(provider: any): provider is VimeoProvider;
/** @see {@link https://www.vidstack.io/docs/player/providers/google-cast} */
declare function isGoogleCastProvider(provider: any): provider is GoogleCastProvider;
/** @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement} */
declare function isHTMLAudioElement(element: unknown): element is HTMLAudioElement;
/** @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement} */
declare function isHTMLVideoElement(element: unknown): element is HTMLVideoElement;
/** @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement} */
declare function isHTMLMediaElement(element: unknown): element is HTMLMediaElement;
/** @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement} */
declare function isHTMLIFrameElement(element: unknown): element is HTMLIFrameElement;

/**
 * Used to display preview thumbnails when the user is hovering or dragging the time slider.
 * The time ranges in the WebVTT file will automatically be matched based on the current slider
 * pointer position.
 *
 * @attr data-loading - Whether thumbnail image is loading.
 * @attr data-error - Whether an error occurred loading thumbnail.
 * @attr data-hidden - Whether thumbnail is not available or failed to load.
 * @docs {@link https://www.vidstack.io/docs/player/components/sliders/slider-thumbnail}
 */
declare class SliderThumbnail extends Thumbnail {
    private _slider;
    protected onAttach(el: HTMLElement): void;
    protected _getTime(): number;
}

interface SliderContext {
    _disabled: ReadSignal<boolean>;
    _orientation: ReadSignal<SliderOrientation>;
    _preview: WriteSignal<HTMLElement | null>;
}
declare const sliderContext: Context<SliderContext>;

declare class LibASSTextRenderer implements TextRenderer {
    readonly loader: LibASSModuleLoader;
    config?: LibASSConfig | undefined;
    readonly priority = 1;
    private _instance;
    private _track;
    private _typeRE;
    constructor(loader: LibASSModuleLoader, config?: LibASSConfig | undefined);
    canRender(track: TextTrack, video: HTMLVideoElement | null): boolean;
    attach(video: HTMLVideoElement | null): void;
    changeTrack(track: TextTrack | null): void;
    detach(): void;
    private _freeTrack;
}
interface LibASSModuleLoader {
    (): Promise<{
        default: LibASSConstructor;
    }>;
}
interface LibASSConstructor {
    new (config?: {
        video: HTMLVideoElement;
        canvas?: HTMLCanvasElement;
        subUrl?: string;
    } & LibASSConfig): LibASSInstance;
}
interface LibASSInstance extends EventsTarget<LibASSInstanceEvents> {
    _video: HTMLVideoElement;
    _canvas: HTMLVideoElement | null;
    setTrackByUrl(url: string): void;
    setCurrentTime(time: number): void;
    freeTrack(): void;
    destroy(): void;
}
interface LibASSInstanceEvents {
    ready: LibASSReadyEvent;
    error: LibASSErrorEvent;
}
interface LibASSReadyEvent extends Event {
}
interface LibASSErrorEvent extends ErrorEvent {
}
/**
 * @see {@link https://github.com/ThaUnknown/jassub/tree/main#options}
 */
interface LibASSConfig {
    /**
     * Which image blending mode to use. WASM will perform better on lower end devices, JS will
     * perform better if the device and browser supports hardware acceleration.
     *
     * @defaultValue "js"
     */
    blendMode?: 'js' | 'wasm';
    /**
     * Whether or not to use async rendering, which offloads the CPU by creating image bitmaps on
     * the GPU.
     *
     * @defaultValue true
     */
    asyncRender?: boolean;
    /**
     * Whether or not to render things fully on the worker, greatly reduces CPU usage.
     *
     * @defaultValue true
     */
    offscreenRender?: boolean;
    /**
     * Whether or not to render subtitles as the video player renders frames, rather than predicting
     * which frame the player is on using events.
     *
     * @defaultValue true
     */
    onDemandRender?: boolean;
    /**
     * Target FPS to render subtitles at. Ignored when onDemandRender is enabled.
     *
     * @defaultValue 24
     */
    targetFps?: number;
    /**
     * Subtitle time offset in seconds.
     *
     * @defaultValue 0
     */
    timeOffset?: number;
    /**
     * Whether or not to print debug information.
     *
     * @defaultValue false
     */
    debug?: boolean;
    /**
     * Scale down (< 1.0) the subtitles canvas to improve performance at the expense of quality, or
     * scale it up (> 1.0).
     *
     * @defaultValue 1.0
     */
    prescaleFactor?: number;
    /**
     * The height in pixels beyond which the subtitles canvas won't be pre-scaled.
     *
     * @defaultValue 1080
     */
    prescaleHeightLimit?: number;
    /**
     * The maximum rendering height in pixels of the subtitles canvas. Beyond this subtitles will
     * be up-scaled by the browser.
     *
     * @defaultValue 0
     */
    maxRenderHeight?: number;
    /**
     * Attempt to discard all animated tags. Enabling this may severely mangle complex subtitles
     * and should only be considered as an last ditch effort of uncertain success for hardware
     * otherwise incapable of displaying anything. Will not reliably work with manually edited or
     * allocated events.
     *
     * @defaultValue false
     */
    dropAllAnimations?: boolean;
    /**
     * The URL of the worker.
     *
     * @defaultValue "jassub-worker.js"
     */
    workerUrl?: string;
    /**
     * The URL of the legacy worker. Only loaded if the browser doesn't support WASM.
     *
     * @defaultValue "jassub-worker-legacy.js"
     */
    legacyWorkerUrl?: string;
    /**
     * The URL of the subtitle file to play.
     *
     */
    subUrl?: string;
    /**
     * The content of the subtitle file to play.
     *
     */
    subContent?: string;
    /**
     * An array of links or `Uint8Array` to the fonts used in the subtitle. If `Uint8Array` is used
     * the array is copied, not referenced. This forces all the fonts in this array to be loaded
     * by the renderer, regardless of if they are used.
     *
     */
    fonts?: string[] | Uint8Array[];
    /**
     * Object with all available fonts. Key is font family in lower case, value is link or
     * `Uint8Array`. These fonts are selectively loaded if detected as used in the current
     * subtitle track.
     *
     * @defaultValue {'liberation sans': './default.woff2'}}
     */
    availableFonts?: Record<string, string>;
    /**
     * The font family key of the fallback font in `availableFonts` to use if the other font
     * for the style is missing special glyphs or unicode.
     *
     * @defaultValue "liberation sans"
     */
    fallbackFont?: string;
    /**
     * If the Local Font Access API is enabled `[chrome://flags/#font-access]`, the library will
     * query for permissions to use local fonts and use them if any are missing. The permission can
     * be queried beforehand using `navigator.permissions.request({ name: 'local-fonts' })`.
     *
     * @defaultValue true
     */
    useLocalFonts?: boolean;
    /**
     * libass bitmap cache memory limit in MiB (approximate).
     */
    libassMemoryLimit?: number;
    /**
     * libass glyph cache memory limit in MiB (approximate).
     */
    libassGlyphLimit?: number;
}

declare function findActiveCue(cues: readonly VTTCue[], time: number): VTTCue | null;
declare function isCueActive(cue: VTTCue, time: number): boolean;
declare function watchActiveTextTrack(tracks: TextTrackList, kind: TextTrackKind | TextTrackKind[], onChange: (track: TextTrack | null) => void): Dispose;
declare function watchCueTextChange(tracks: TextTrackList, kind: TextTrackKind | TextTrackKind[], callback: (title: string) => void): void;

declare function sortVideoQualities(qualities: VideoQuality[], desc?: boolean): VideoQuality[];

declare const MEDIA_KEY_SHORTCUTS: MediaKeyShortcuts;

declare class ARIAKeyShortcuts extends ViewController {
    private _shortcut;
    constructor(_shortcut: string);
    protected onAttach(el: HTMLElement): void;
}

declare const AUDIO_EXTENSIONS: RegExp;
declare const AUDIO_TYPES: Set<string>;
declare const VIDEO_EXTENSIONS: RegExp;
declare const VIDEO_TYPES: Set<string>;
declare const HLS_VIDEO_EXTENSIONS: RegExp;
declare const DASH_VIDEO_EXTENSIONS: RegExp;
declare const HLS_VIDEO_TYPES: Set<string>;
declare const DASH_VIDEO_TYPES: Set<string>;
declare function isAudioSrc({ src, type }: Src): boolean;
declare function isVideoSrc(src: Src): boolean;
declare function isHLSSrc({ src, type }: Src): boolean;
declare function isDASHSrc({ src, type }: Src): boolean;
declare function canGoogleCastSrc(src: Src): boolean;
declare function isMediaStream(src: unknown): src is MediaStream;

/**
 * Checks if the ScreenOrientation API is available.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation}
 */
declare function canOrientScreen(): boolean;
/**
 * Checks if the screen orientation can be changed.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation}
 */
declare function canRotateScreen(): boolean;
/**
 * Checks if the native HTML5 video player can play HLS.
 */
declare function canPlayHLSNatively(video?: HTMLVideoElement | null): boolean;
/**
 * Checks if the native HTML5 video player can enter picture-in-picture (PIP) mode when using
 * the Chrome browser.
 *
 * @see {@link https://developers.google.com/web/updates/2018/10/watch-video-using-picture-in-picture}
 */
declare function canUsePictureInPicture(video: HTMLVideoElement | null): boolean;
/**
 * Checks if the native HTML5 video player can use the presentation API in Safari.
 *
 * @see {@link https://developer.apple.com/documentation/webkitjs/htmlvideoelement/1631913-webkitpresentationmode}
 */
declare function canUseVideoPresentation(video: HTMLVideoElement | null): boolean;
declare function canChangeVolume(): Promise<boolean>;

export { ARIAKeyShortcuts, AUDIO_EXTENSIONS, AUDIO_TYPES, AudioProvider, AudioProviderLoader, DASHProvider, DASHProviderLoader, DASH_VIDEO_EXTENSIONS, DASH_VIDEO_TYPES, GoogleCastLoadedEvent, GoogleCastLoader, GoogleCastProvider, HLSProvider, HLSProviderLoader, HLS_VIDEO_EXTENSIONS, HLS_VIDEO_TYPES, type LibASSConfig, type LibASSConstructor, type LibASSErrorEvent, type LibASSInstance, type LibASSInstanceEvents, type LibASSModuleLoader, type LibASSReadyEvent, LibASSTextRenderer, MEDIA_KEY_SHORTCUTS, MediaContext, MediaKeyShortcuts, MediaProviderLoader, MediaType, type SliderContext, SliderOrientation, SliderThumbnail, Src, TextRenderer, TextTrack, TextTrackList, Thumbnail, VIDEO_EXTENSIONS, VIDEO_TYPES, VideoProvider, VideoProviderLoader, VideoQuality, VimeoProvider, VimeoProviderLoader, YouTubeProvider, YouTubeProviderLoader, canChangeVolume, canGoogleCastSrc, canOrientScreen, canPlayHLSNatively, canRotateScreen, canUsePictureInPicture, canUseVideoPresentation, findActiveCue, isAudioProvider, isAudioSrc, isCueActive, isDASHProvider, isDASHSrc, isGoogleCastProvider, isHLSProvider, isHLSSrc, isHTMLAudioElement, isHTMLIFrameElement, isHTMLMediaElement, isHTMLVideoElement, isMediaStream, isVideoProvider, isVideoSrc, isVimeoProvider, isYouTubeProvider, sliderContext, sortVideoQualities, watchActiveTextTrack, watchCueTextChange };
